from aiogram import types
from aiogram.utils.i18n import gettext as _
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, WebAppInfo

from .services.database.models import BotUser, Settings
from .callback_data import ActionsWithUser, DeleteCallbackData, PaymentCallbackData, StarsPaymentCallbackData


remove_markup = types.ReplyKeyboardRemove(remove_keyboard=True)
symbols = ['‚ùå', '‚úÖ']

async def admin_panel():
    affiliate_program = await Settings.get(name='affiliate_program')
    pdf_format = await Settings.get(name='pdf_format')
    payment_method = await Settings.get(name='payment_method')
    return (
        InlineKeyboardBuilder()
        .button(text=_('üì® –†–∞—Å—Å—ã–ª–∫–∞'), callback_data='admin_mailing')
        .button(text=_('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), callback_data='admin_statistics')
        .button(text=_('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'), callback_data='admin_get_user')
        .button(text=_('üí≥ –ü–ª–∞—Ç–µ–∂–∏'), callback_data='admin_get_payments')
        .button(text=_('üìÑ Excel'), callback_data='admin_get_excel')
        .button(text=f'{symbols[affiliate_program.bool_value]} –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞', callback_data='affiliate_program')
        .button(text=f'{symbols[pdf_format.bool_value]} PDF –§–æ—Ä–º–∞—Ç', callback_data='pdf_format')
        .button(text=f'{symbols[payment_method.bool_value]} Wallet Pay', callback_data='payment_method')
        .adjust(2, repeat=True)
        .as_markup()
    )

def actions_with_user(user: BotUser):
    markup = (
        InlineKeyboardBuilder()
        .button(text=_('{} –ê–¥–º–∏–Ω').format(symbols[user.admin]), callback_data=ActionsWithUser(user_id=user.id, action='admin').pack())
        .button(text=_('{} –ó–∞–±–∞–Ω–µ–Ω').format(symbols[user.is_banned]), callback_data=ActionsWithUser(user_id=user.id, action='ban').pack())
        .button(text=_('üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'), callback_data=ActionsWithUser(user_id=user.id, action='edit_balance').pack())
        .button(text=_('üóë –£–¥–∞–ª–∏—Ç—å —Å –±–∞–∑—ã'), callback_data=ActionsWithUser(user_id=user.id, action='del').pack())
        .button(text=_('‚óÄÔ∏è –ù–∞–∑–∞–¥'), callback_data='back_admin')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup

def question_delete_entity(entity_id: int, type_entity: str):
    markup = (
    InlineKeyboardBuilder()
        .button(text=f'‚úÖ', callback_data=DeleteCallbackData(id=entity_id, type_entity=type_entity).pack())
        .button(text=f'‚ùå', callback_data=DeleteCallbackData(id=entity_id, type_entity='back').pack())
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup

def sending_keyboard():
    return (
        InlineKeyboardBuilder()
        .button(text=_('üë• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º'), callback_data='everyone')
        .button(text=_('üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ–º—É'), callback_data='one')
        .button(text=_('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'), callback_data='cancel')
        .adjust(2, repeat=True)
        .as_markup()
    )

def add_metric():
    return (
        InlineKeyboardBuilder()
        .button(text=_('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É'), callback_data='add_metric')
        .button(text=_('üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É'), callback_data='del_metric')
        .button(text=_('‚óÄÔ∏è –ù–∞–∑–∞–¥'), callback_data='back_admin')
        .adjust(2, repeat=True)
        .as_markup()
    )

def back_admin():
    return (
        InlineKeyboardBuilder()
        .button(text=_('‚óÄÔ∏è –ù–∞–∑–∞–¥'), callback_data='back_admin')
        .adjust(1, repeat=True)
        .as_markup()
    )

def report_link(link: str):
    return (
        InlineKeyboardBuilder()
        .button(text='üìë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç', url=link)
        .adjust(1, repeat=True)
        .as_markup()
    )

async def main_markup():
    ap = await Settings.get(name='affiliate_program')
                            
    main_markup = (
        InlineKeyboardBuilder()
        .button(text='üí° –ü–æ–º–æ—â—å', callback_data='help')
        .button(text='üí≥ –û–ø–ª–∞—Ç–∞', callback_data='payment')
    )
    if ap.bool_value:
        main_markup.button(text='ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data='friends')
    return main_markup.adjust(2, repeat=True).as_markup()



payment = (
    InlineKeyboardBuilder()
    .button(text='üí≥ –û–ø–ª–∞—Ç–∞', callback_data='payment')
    .adjust(1, repeat=True)
    .as_markup()
)

price_list = (
    InlineKeyboardBuilder()
    .button(text='1 –ø—Ä–æ–≤–µ—Ä–∫–∞ - $2,2', callback_data=PaymentCallbackData(checks=1, amount=2.2).pack())
    .button(text='10 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $20', callback_data=PaymentCallbackData(checks=10, amount=20).pack())
    .button(text='25 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $48', callback_data=PaymentCallbackData(checks=25, amount=48).pack())
    .button(text='50 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $90', callback_data=PaymentCallbackData(checks=50, amount=90).pack())
    .button(text='100 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $170', callback_data=PaymentCallbackData(checks=100, amount=170).pack())
    .button(text='1000 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $1 600', callback_data=PaymentCallbackData(checks=1000, amount=1600).pack())
    .button(text='5000 –ø—Ä–æ–≤–µ—Ä–æ–∫ - $7 500', callback_data=PaymentCallbackData(checks=5000, amount=7500).pack())
    .button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='start')
    .adjust(1, repeat=True)
    .as_markup()
)

def payment_link(url: str):
    if 't.me' in url:
        r = InlineKeyboardBuilder().button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', web_app=WebAppInfo(url=url))

    r = InlineKeyboardBuilder().button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=url)
    
    return r.adjust(1, repeat=True).as_markup()

back_to_start = (
    InlineKeyboardBuilder()
    .button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='start')
    .adjust(1, repeat=True)
    .as_markup()
)

def example_reply():
    return (
        ReplyKeyboardBuilder()
        .button(text='First bnt')
        .button(text='Second bnt')
        .adjust(2, repeat=True)
        .as_markup(is_persistent=True, resize_keyboard=True)
    )

stars_payment_keyboard = (
    InlineKeyboardBuilder()
    .button(text='1 –ø—Ä–æ–≤–µ—Ä–∫–∞ - 93 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=1, amount=93).pack(), pay=True)
    .button(text='10 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 844 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=10, amount=844).pack(), pay=True)
    .button(text='25 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 2026 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=25, amount=2026).pack(), pay=True)
    .button(text='50 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 3799 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=50, amount=3799).pack(), pay=True)
    .button(text='100 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 7177 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=100, amount=7177).pack(), pay=True)
    .button(text='1000 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 67546 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=1000, amount=67546).pack(), pay=True)
    .button(text='5000 –ø—Ä–æ–≤–µ—Ä–æ–∫ - 316623 ‚≠êÔ∏è', callback_data=StarsPaymentCallbackData(checks=5000, amount=316623).pack(), pay=True)
    .button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='start')
    .adjust(1, repeat=True)
    .as_markup()
)

select_payment_method = (
    InlineKeyboardBuilder()
    .button(text='Wallet Pay', callback_data='wallet_pay_method')
    .button(text='Stars ‚≠êÔ∏è', callback_data='stars_method')
    .adjust(1, repeat=True)
    .as_markup()
)

def confirmation_stars_def(amount: int):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    pay_button = InlineKeyboardButton(text=f'‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å {amount}‚≠êÔ∏è', pay=True)
    back_button = InlineKeyboardButton(text='‚ùå –ù–∞–∑–∞–¥', callback_data='stars_payment_cancel')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [pay_button],  # –ö–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
        [back_button]  # –ö–Ω–æ–ø–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
    ])

    return keyboard
