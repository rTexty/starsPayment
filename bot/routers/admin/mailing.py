import asyncio

from aiogram import F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.exceptions import TelegramBadRequest

from . import router
from ... import markups
from ...state import MailingState
from ...services.database.models import BotUser


@router.callback_query(F.data == 'admin_mailing')
async def admin_callback(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(MailingState.waiting_msg)

    text = _('üì®–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–§–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n\n'
            '<em>–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</em>')
    
    return await call.message.edit_text(text, reply_markup=markups.back_admin())


@router.message(MailingState.waiting_msg, flags={"del_murkap": True})
async def get_message_to_send(message: types.Message, state: FSMContext):
    await state.update_data(message=message)
    await state.set_state(MailingState.waiting_choose)
    await message.answer(_('<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å?</b>'), reply_markup=markups.sending_keyboard())


@router.callback_query(MailingState.waiting_choose)
async def send_mailing_accept(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    if call.data == 'one':
        await state.set_state(MailingState.waiting_recipient)
        return call.message.answer(_('<b>–ü—Ä–∏—à–ª–∏—Ç–µ id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>'))
    
    elif call.data == 'cancel':
        await state.clear()
        return call.message.edit_text(
            _('‚úâ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå</b>'),
            reply_markup=await markups.admin_panel()
        )

    send, not_send = 0, 0
    users = await BotUser.exclude(active=False).all()

    await call.message.edit_text(_('üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ </b>'), reply_markup=await markups.admin_panel())

    data = await state.get_data()
    await state.clear()

    for user in users:
        try:
            await bot.copy_message(user.id, call.from_user.id, data['message'].message_id)
            send += 1
        except TelegramBadRequest:
            not_send += 1
            user.active = False
            await user.save()
        finally:
            await asyncio.sleep(0.2)
    
    text = _('‚úâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <code>{}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚úÖ\n'
            '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ <code>{}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚ùå').format(send, not_send)

    await call.message.answer(text)


@router.message(F.text, MailingState.waiting_recipient)
async def send_mailing_admin(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await state.clear()

    user_data = message.text.replace('@', '')
    
    user = await BotUser.get_user(user_data)

    if not user:
        return message.answer(
            _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'),
            reply_markup=await markups.admin_panel()
        )
    
    try:
        await bot.copy_message(user.id, message.from_user.id, data['message'].message_id)
        text = _('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ')
    except TelegramBadRequest:
        text = _('–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üôÅ')

        user.active = False
        await user.save()   

    await bot.send_message(
        message.from_user.id, text,
        reply_markup=await markups.admin_panel()
    )

